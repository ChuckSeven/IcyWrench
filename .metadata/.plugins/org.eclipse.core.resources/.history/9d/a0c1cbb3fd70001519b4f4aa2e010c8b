package Parser.Http;

import java.net.URI;
import java.net.URISyntaxException;

/**
 * class to parse uri request with an HTTP version info a the end.
 * 
 * @author 150021237
 *
 */
public class UriParser {

	private URI innerUri;

	public UriParser(String str) throws URISyntaxException {
		innerUri = new URI(removeHttpVersion(str));
	}

	/**
	 * Return innerUri element.
	 * 
	 * @return
	 */
	public URI getURI() {
		return innerUri;
	}

	/**
	 * Removes the HTTP/1.1 from the GET request.
	 * @param str
	 * @return
	 */
	private String removeHttpVersion(String str) {
		int last = str.lastIndexOf(' ');
		if (last > 0 && last < str.length()) {
			if (str.substring(last).trim().toUpperCase().equals("HTTP/1.1")
					|| str.substring(last).trim().toUpperCase().equals("HTTP/1.0"))
				return str.substring(0, last);
		}
		return str;
	}
	
	/**
	 * Extract the path to the folder which contains the file.
	 * @return "/" if no valid path is given.
	 */
	public String getFolderPath() {
		String path = innerUri.getPath();
		int last = path.lastIndexOf('/')+1;
		if(0 < last && last < path.length()) {
			return path.substring(0,last);
		} else {
			return "/";
		}
	}
	
	/**
	 * Extract only the name of the file without ending.
	 * @return filename or "index" for file name.
	 */
	public String getFileName() {
		String[] f = getFile().split("\\.");
		return f[0];
	}
	
	/**
	 * Extract the file type if existent.
	 * @return Return empty String if non-existent.
	 */
	public String getFileType() {
		String[] f = getFile().split("\\.");
		if(f.length > 1)
			return f[1];
		else
			return "";
	}
	
	/**
	 * Path as well as file name and ending.
	 * @return folder path with file name and ending.
	 */
	public String getFilePath() {
		return getFolderPath() + getFileName() + "." + getFileType();
	}
	
	/**
	 * Extract everything between the path and the arguments begging with "?".
	 * @return
	 */
	private String getFile() {
		String path = innerUri.getPath();
		int last = path.lastIndexOf('/')+1;
		if(0 < last && last < path.length()) {
			String rest = path.substring(last);
			int firstSpace = rest.indexOf('?') + 1;
			if(0 < firstSpace && firstSpace < rest.length())
				return rest.substring(0, firstSpace);
			else 
				return rest;
		}
		return "index";
	}
}
